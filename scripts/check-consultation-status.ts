import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { join } from 'path';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function checkConsultationStatus(): Promise<void> {
  console.log('üîç ÏÉÅÎã¥ ÌÖåÏù¥Î∏î ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...');

  try {
    // 1. Ï†ÑÏ≤¥ ÏÉÅÎã¥ Ïàò ÌôïÏù∏
    const { data: allConsultations, error: allError } = await supabase
      .from('consultations')
      .select('id, consultation_id, image_urls')
      .order('consultation_id');

    if (allError) throw allError;

    console.log(`üìä Ï†ÑÏ≤¥ ÏÉÅÎã¥ Ïàò: ${allConsultations.length}Í∞ú`);

    // 2. image_urls ÏÉÅÌÉú Î∂ÑÏÑù
    let emptyImageUrls = 0;
    let nullImageUrls = 0;
    let withImageUrls = 0;

    allConsultations.forEach(consultation => {
      if (consultation.image_urls === null) {
        nullImageUrls++;
      } else if (Array.isArray(consultation.image_urls) && consultation.image_urls.length === 0) {
        emptyImageUrls++;
      } else if (Array.isArray(consultation.image_urls) && consultation.image_urls.length > 0) {
        withImageUrls++;
      }
    });

    console.log(`üìä Ïù¥ÎØ∏ÏßÄ URL ÏÉÅÌÉú:`);
    console.log(`  - null: ${nullImageUrls}Í∞ú`);
    console.log(`  - Îπà Î∞∞Ïó¥: ${emptyImageUrls}Í∞ú`);
    console.log(`  - Ïù¥ÎØ∏ÏßÄ ÏûàÏùå: ${withImageUrls}Í∞ú`);

    // 3. ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ (Ï≤òÏùå 5Í∞ú)
    console.log('\nüìã ÏÉòÌîå Îç∞Ïù¥ÌÑ∞:');
    allConsultations.slice(0, 5).forEach(consultation => {
      console.log(`  ${consultation.consultation_id}: ${JSON.stringify(consultation.image_urls)}`);
    });

    // 4. Ïù¥ÎØ∏ÏßÄ Îß§Ìïë ÌååÏùºÍ≥º ÎπÑÍµê
    const imageUrlMappingPath = join(process.cwd(), 'migration_data', 'image_url_mapping.json');
    const imageUrlMapping: Record<string, string[]> = JSON.parse(
      readFileSync(imageUrlMappingPath, 'utf-8')
    );

    console.log(`\nüì• Îß§Ìïë ÌååÏùº Ï†ïÎ≥¥:`);
    console.log(`  - Ï¥ù Îß§Ìïë Ïàò: ${Object.keys(imageUrlMapping).length}Í∞ú`);

    // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäî Îß§Ìïë Ïàò Í≥ÑÏÇ∞
    const mappingsWithImages = Object.entries(imageUrlMapping).filter(([_, urls]) => urls.length > 0);
    console.log(`  - Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎäî Îß§Ìïë: ${mappingsWithImages.length}Í∞ú`);

    // 5. Îß§ÌïëÍ≥º DB Îç∞Ïù¥ÌÑ∞ ÎπÑÍµê
    console.log('\nüîç Îß§ÌïëÍ≥º DB ÎπÑÍµê:');
    let matchingIds = 0;
    let missingInDb = 0;

    Object.keys(imageUrlMapping).forEach(consultationId => {
      const dbRecord = allConsultations.find(c => c.consultation_id === consultationId);
      if (dbRecord) {
        matchingIds++;
      } else {
        missingInDb++;
        console.log(`  ‚ùå DBÏóê ÏóÜÏùå: ${consultationId}`);
      }
    });

    console.log(`  - Îß§ÌïëÍ≥º DB ÏùºÏπò: ${matchingIds}Í∞ú`);
    console.log(`  - DBÏóê ÏóÜÎäî Îß§Ìïë: ${missingInDb}Í∞ú`);

    // 6. ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÌïÑÏöîÌïú ÏÉÅÎã¥ ÌôïÏù∏
    console.log('\nüîÑ ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöîÌïú ÏÉÅÎã¥:');
    let needsUpdate = 0;

    allConsultations.forEach(consultation => {
      const consultationId = consultation.consultation_id;
      const mappedUrls = imageUrlMapping[consultationId];
      
      if (mappedUrls && mappedUrls.length > 0) {
        const currentUrls = consultation.image_urls || [];
        const urlsChanged = JSON.stringify(currentUrls) !== JSON.stringify(mappedUrls);
        
        if (urlsChanged) {
          needsUpdate++;
          if (needsUpdate <= 5) { // Ï≤òÏùå 5Í∞úÎßå Ï∂úÎ†•
            console.log(`  üìù ${consultationId}: ${currentUrls.length} ‚Üí ${mappedUrls.length}Í∞ú Ïù¥ÎØ∏ÏßÄ`);
          }
        }
      }
    });

    console.log(`  - ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî: ${needsUpdate}Í∞ú`);

  } catch (error) {
    console.error('üí• ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
    throw error;
  }
}

// Ïã§Ìñâ
if (require.main === module) {
  checkConsultationStatus()
    .then(() => process.exit(0))
    .catch(() => process.exit(1));
} 